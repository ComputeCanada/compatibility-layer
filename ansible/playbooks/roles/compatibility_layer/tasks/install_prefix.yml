# Install Gentoo Prefix.
---

- name: Fail if host OS is not supported
  fail:
    msg: |
      Error: the operating system of the installation host is {{ ansible_os_family }} {{ ansible_distribution_version }}.
      The task for installing Gentoo Prefix currently only supports Linux distributions based on RHEL 8.
  when: not(ansible_os_family == "RedHat" and ansible_distribution_major_version is version("8", "=="))

- name: "Install EPEL"
  yum:
    name:
      - https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
    disable_gpg_check: yes
    state: present
  tags:
    - build_prefix

- name: "Install other requirements (Singularity et al.)"
  yum:
    name:
      - singularity
    state: present
  tags:
    - build_prefix

- name: "Get the username running the deployment (not root)"
  shell: set -o pipefail && who | grep -v root | awk '{print $1}' | uniq
  become: no
  register: username_on_host
  changed_when: True
  tags:
    - build_prefix

- name: "Create Gentoo prefix path and log directory -- {{ gentoo_prefix_path }} and {{ eessi_log_dir }}"
  file:
    path: "{{ item }}"
    state: directory
    recurse: yes
    owner: "{{ username_on_host.stdout }}"
    group: "{{ username_on_host.stdout }}"
    mode: "0755"
  with_items:
    - "{{ gentoo_prefix_path }}"
    - "{{ eessi_log_dir }}"
  tags:
    - build_prefix

- name: "Check for sufficient disk space in {{ gentoo_prefix_path }}"
  command: "df {{ gentoo_prefix_path }} --output=avail"
  register: prefix_path_free_space
  changed_when: True
  tags:
    - build_prefix

- name: "Fail if there is not sufficient available disk space in {{ gentoo_prefix_path }}"
  fail:
    msg: "The Gentoo Prefix installation directory ({{ gentoo_prefix_path }}) does not have sufficient available disk space ({{ prefix_required_space }})."
  when: (prefix_path_free_space.stdout_lines|last|float * 1024) is lt (prefix_required_space|human_to_bytes)
  tags:
    - build_prefix

- name: "Copy custom bootstrap script"
  copy:
    src: "{{ prefix_custom_bootstrap_script.local }}"
    dest: "{{ prefix_custom_bootstrap_script.remote }}"
    mode: 0755
  when: not prefix_use_builtin_bootstrap
  tags:
    - build_prefix

- name: "Create $EPREFIX/etc/portage directory"
  file:
    path: "{{ gentoo_prefix_path }}/etc/portage"
    state: directory
    mode: 0755
  when: prefix_mask_packages is defined and prefix_mask_packages | length > 0
  tags:
    - build_prefix
    
- name: "Mask packages for the bootstrap"
  copy:
    dest: "{{ gentoo_prefix_path }}/etc/portage/package.mask"
    content: "{{ prefix_mask_packages }}"
    mode: 0644
  when: prefix_mask_packages is defined and prefix_mask_packages | length > 0
  tags:
    - build_prefix

- name: "Give {{ username_on_host.stdout }} recursive user and group ownership of {{ gentoo_prefix_path }}"
  file:
    dest: "{{ gentoo_prefix_path }}"
    owner: "{{ username_on_host.stdout }}"
    group: "{{ username_on_host.stdout }}"
    recurse: yes
  tags:
    - build_prefix

- name: "Install Gentoo prefix via {{ prefix_install }}"
  shell: set -o pipefail && ( {{ prefix_install }} | tee -a {{ prefix_build_log }} | grep -E '^(>>> Installing|\\* )' )
  become: no
  changed_when: True
  tags:
    - build_prefix

- name: "Check if startprefix script has been created"
  stat:
    path: "{{ gentoo_prefix_path }}/startprefix"
  register: startprefix
  tags:
    - build_prefix

- name: "Fail if startprefix script has not been created"
  fail:
    msg: "The resulting Gentoo Prefix installation does not have a startprefix script. Something went wrong!"
  when: not startprefix.stat.exists
  tags:
    - build_prefix
